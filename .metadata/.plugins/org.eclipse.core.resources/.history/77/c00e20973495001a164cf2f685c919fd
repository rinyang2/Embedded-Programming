#include "FreeRTOS.h"
#include "glob_def.h"
#include "emp_type.h"
#include "tm4c123gh6pm.h"
#include "string.h"
#include "file.h"
#include "lcd.h"
#include "key.h"
#include "ui.h"
#include "scale.h"
#include "semphr.h"
#include "adc.h"

void ui_task(void *pvParameters)
{
    INT8U ui_state = 0;
    INT16U off1;                                                        // off1-3 are used for storing the 3 digits of the offset temporarily
    INT8U off2;
    INT8U off3;
    INT8U scale_tmp;                                                    // scale_tmp stores the scale value temporarily
    scale = 1;                                                          // we initialize the scale and offset values
    offset = 0;
while(1){
    INT8U key = 0;
    key = get_keyboard();
    if(key == '1'){
        gfprintf(COM2, "%c%cCARD         ", 0x1B, 0xA8);
    }
    else if(key == '2'){
        gfprintf(COM2, "%c%cCASH         ", 0x1B, 0xA8);
    }
    else{
        gfprintf(COM2, "%c%cERROR         ", 0x1B, 0xA8);
    }
}
/*
    while(1)
    {
        INT8U key = 0;
        gfprintf(COM2, "%c%cValue: %05u", 0x1B, 0x80, adjusted_value);  // the adjusted value is shown on the first line of the display. this is done outside the state machine so it's displayed all the time
        switch(ui_state)
        {
        case 0:
            gfprintf(COM2, "%c%cScale:         ", 0x1B, 0xA8);          // "Scale:" is printed on the second line of the display
            key = get_keyboard();                                       // we get a value from the keyboard
            if( key >= '0' && key <= '9')                               // if it's a number between 0 and 9 we save that value in scale_tmp and go to the next state
            {
                scale_tmp = key - '0';                                  // the value from the keyboard is given as an ASCII char, so to convert to the actual value we subtract the ASCII-value for 0
                ui_state = 1;
            }
            break;
        case 1:
            gfprintf(COM2, "%c%cOffset:", 0x1B, 0xA8);                  // "Offset:" is printed on the second line of the display
            key = get_keyboard();                                       // same procedure as in state 0, but we save the value in off1 since we want it as the first digit of the offset value
            if( key >= '0' && key <= '9')
            {
                gfprintf(COM2, "%c%c%c", 0x1B, 0xC9, key);              // the digit is printed on the second line (after "Offset:")
                off1 = (key - '0')*100;                                 // again we subtract the ASCII for 0. we also multiply by 100 since it's the first of the 3 digits
                ui_state = 2;
            }
            break;
        case 2:
            key = get_keyboard();                                       // same procedure for the second digit of the offset value
            if( key >= '0' && key <= '9')
            {
                gfprintf(COM2, "%c%c%c", 0x1B, 0xCA, key);
                off2 = (key - '0')*10;
                ui_state = 3;
            }
            break;
        case 3:
            key = get_keyboard();                                       // same procedure for the third digit of the offset value
            if( key >= '0' && key <= '9')
            {
                gfprintf(COM2, "%c%c%c", 0x1B, 0xCB, key);
                off3 = (key - '0')*1;

                if( xSemaphoreTake( xMutex, portMAX_DELAY ))            // we want to change the shared variables so we protect them with a mutex
                {
                    scale = scale_tmp;
                    offset = off1 + off2 + off3;
                    xSemaphoreGive(xMutex);
                }
                ui_state = 0;
            }
            break;
        }
    }
    */
};

